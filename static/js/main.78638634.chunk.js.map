{"version":3,"sources":["App.js","reportWebVitals.js","serviceWorker.js","index.js"],"names":["theme","extendTheme","styles","global","body","color","fonts","heading","App","resetCSS","display","flexDirection","alignItems","justifyContent","textAlign","mt","backgroundColor","pt","pl","pr","pb","minWidth","maxWidth","vertical-align","overflow","height","width","gap","row","column","p","src","id","fontWeight","m","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.78638634.chunk.js","sourcesContent":["import React from 'react'\nimport \"@fontsource/comic-mono\"\nimport \"@fontsource/roboto-mono\"\nimport {\n  ChakraProvider,\n  Box,\n  Image,\n  Button,\n  Badge,\n  Text,\n  Icon,\n  Stack,\n  Avatar,\n  AvatarBadge,\n  Alert,\n  AlertIcon,\n  AlertTitle,\n  AlertDescription,\n  FormLabel,\n  Input,\n  FormHelperText,\n  FormErrorMessage,\n  Grid,\n  Switch,\n  InputGroup,\n  InputRightElement,\n  Flex,\n  Tag,\n  Heading,\n  List,\n  ListItem\n} from '@chakra-ui/react'\nimport { extendTheme } from \"@chakra-ui/react\"\n\nconst theme = extendTheme({\n  styles: {\n    global: {\n      body: {\n        color: \"#D5DBDB\",\n\n      }\n    }\n  },\n  fonts: {\n    heading: \"Comic Mono\",\n    body: \"Roboto Mono\",\n  },\n  // colors: {\n  //   // body: '#D5DBDB'\n  // }\n  \n  // colors: {\n  //   brand: {\n  //     100: \"#f7fafc\",\n  //     // ...\n  //     900: \"#1a202c\",\n  //   },\n  // },\n})\n\n\n\nconst App = () => (\n  <ChakraProvider resetCSS theme={theme}>\n    <Flex\n      display=\"flex\"\n      flexDirection=\"row\"\n      alignItems=\"center\"\n      justifyContent=\"center\"\n      textAlign=\"center\"\n      mt={4}\n      backgroundColor=\"#000000\"\n      pt={50}\n      pl={25}\n      pr={25}\n      pb={50}\n    >\n        <Box minWidth={175}>\n          <Heading color=\"#ffffff\" maxWidth={150} vertical-align='top'>\n            About\n          </Heading>\n        </Box>\n        <Box minWidth={175}>\n          <Heading color=\"#ffffff\" maxWidth={150} vertical-align='top'>\n            Mint\n          </Heading>\n        </Box>\n        <Box minWidth={175}>\n          <Heading color=\"#ffffff\" maxWidth={150} vertical-align='top'>\n            Road Map\n          </Heading>\n        </Box>\n        <Box minWidth={175}>\n          <Heading color=\"#ffffff\" maxWidth={150} vertical-align='top' overflow=\"hidden\">\n            White Paper\n          </Heading>\n        </Box>\n        <Box minWidth={175}>\n          <Heading color=\"#ffffff\" maxWidth={150} vertical-align='top'>\n            Team\n          </Heading>\n        </Box>\n        <Box minWidth={175}>\n          <Heading color=\"#ffffff\" maxWidth={150} vertical-align='top'>\n            Socials\n          </Heading>\n        </Box>\n        <Box minWidth={175}>\n          <Button height={75} width={150}>\n          <Heading color=\"#000000\" maxWidth={150} vertical-align='top'>\n            MINT\n          </Heading>\n         </Button>\n        </Box>\n    </Flex>\n    <Flex\n      justifyContent=\"center\"\n      color=\"whiteAlpha.500\"\n      backgroundColor=\"#000000\"\n      alignItems=\"stretch\"\n    >\n      <Box>\n        <Grid\n          gap={6}\n          row={7}\n          column={1}\n          // templateRows=\"repeat(7, 1fr)\"\n          minWidth={600}\n          maxWidth={700}\n          p={5}\n        >\n          <Box>\n          <Flex\n              display=\"flex\"\n              flexDirection=\"row\"\n              alignItems=\"center\"\n              justifyContent=\"center\"\n              textAlign=\"center\"\n              backgroundColor=\"#000000\"\n            >\n            <Image src={'worthless_nfts/images/Worthless.png'}/>\n            </Flex>\n          </Box>\n          <Box>\n            <Heading id='About' textAlign=\"center\" color=\"#ffffff\">\n              Think There Are Enough Solana NFT Projects? Think Again.\n            </Heading>\n            <Text color=\"#ffffff\"></Text>\n            <List\n              color=\"#ffffff\"\n              textAlign=\"center\"\n              p={10}\n              fontWeight=\"bold\"\n            >\n              <ListItem pb={2}>1024 NFTs.</ListItem>\n              <ListItem pb={2}>Randomly, Algorithmically Generated.</ListItem>\n              <ListItem pb={2}>Completely Worthless.</ListItem>\n            </List>\n            <Text>\n              Seriously, these are total trash that you absolutely should not\n              buy if you have even half a brain. I literally made these to\n              insult all you retards. Anyone who mints one is a complete idiot.\n              But you're a bunch of dumb Apes, otherwise you wouldn't still be\n              reading this, so you'll probably buy one anyway. Odds of this NFT\n              mooning are basically minus infinity. I'm warning you, DO NOT MINT\n              THIS NFT (Unless you are OK with funding my Lambo).\n            </Text>\n          </Box>\n          <Box>\n            <Heading\n              id='Mint'\n              textAlign=\"center\"\n              color=\"#ffffff\"\n              fontWeight=\"bold\"\n            >\n              Mint - Coming Soon.\n            </Heading>\n            <List p={10} fontWeight=\"bold\">\n              <ListItem color=\"#ffffff\" textAlign=\"center\">\n                1024 NFTS @ 0.5 SOL Mint Price\n              </ListItem>\n            </List>\n            <Text>\n              The Worthless NFT mint will start as soon as I figure out how to\n              copy and paste a mint button into this HTML template. Consider\n              this a social experiment into how many retards will hand over\n              their SOL for one of the laziest NFT projects to date. Mint price\n              will be 0.5 SOL.\n            </Text>\n          </Box>\n          <Box>\n            <Heading id='RoadMap' textAlign=\"center\" color=\"#ffffff\">\n              Road Map\n            </Heading>\n            <Flex\n              display=\"flex\"\n              flexDirection=\"row\"\n              alignItems=\"center\"\n              justifyContent=\"center\"\n              textAlign=\"center\"\n              backgroundColor=\"#000000\"\n              minWidth={700}\n            >\n            <Image src={'worthless_nfts/images/Roadmap.png'}/>\n            </Flex>\n          </Box>\n          <Box>\n            <Heading id='WhitePaper' textAlign=\"center\" color=\"#ffffff\">\n              White Paper\n            </Heading>\n            <Text>\n              You really thought I'd write a 10 page document on why my project\n              will change the NFT space forever? Grow up.\n            </Text>\n          </Box>\n          <Box>\n            <Heading id='Team' textAlign=\"center\" color=\"#ffffff\">\n              Team\n            </Heading>\n            <Flex\n              display=\"flex\"\n              flexDirection=\"row\"\n              alignItems=\"center\"\n              justifyContent=\"center\"\n              textAlign=\"center\"\n              m={4}\n              backgroundColor=\"#000000\"\n            >\n            <Image src={'worthless_nfts/images/dev.png'}/>\n            </Flex>\n            <Text>\n              I am extremely lazy yet highly aspirational monke masquerading as a\n              creative, coder and crypto enthusiast. I have no experience in\n              anything worthwhile but that won't stop me trying to take your\n              money for these crappy JPEGs. Past projects include falling for obvious rugs,\n              panic selling dips and giving my seed phrase to the nice MetaMask support staff in my DMs.\n            </Text>\n          </Box>\n          <Box>\n            <Heading id='Socials' textAlign=\"center\" color=\"#ffffff\">\n              Socials\n            </Heading>\n            <Text>\n              Want to join my community of fellow idiots or send me hatemail?\n              Check out the Discord and Twitter:\n            </Text>\n          </Box>\n          \n        </Grid>\n      </Box>\n    </Flex>\n  </ChakraProvider>\n)\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ColorModeScript } from '@chakra-ui/react';\nimport React, { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <StrictMode>\n    <ColorModeScript />\n    <App />\n  </StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}